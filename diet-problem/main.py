#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
main.py - Arquivo principal para executar o estudo completo do problema da dieta

Estudo do Problema da Dieta - Versão Modularizada
Autor: José Brito

Este arquivo orquestra toda a execução do estudo, desde a criação dos arquivos
até a análise dos resultados.
"""

import os
import sys
from datetime import datetime

# Importar módulos do projeto
from config import ALIMENTOS_DATA, RESTRICOES_ORIGINAIS, RESTRICOES_RELAXADAS
from models import criar_modelos
from data_handler import criar_todos_arquivos_dat, exibir_tabela_alimentos, comparar_restricoes
from solver import DietSolver
from analyzer import DietAnalyzer

def exibir_menu():
    """Exibe o menu principal do programa"""
    print("\n" + "="*60)
    print("ESTUDO DO PROBLEMA DA DIETA - MENU PRINCIPAL")
    print("="*60)
    print("1. Exibir informações dos alimentos")
    print("2. Criar arquivos de modelo (.mod)")
    print("3. Criar arquivos de dados (.dat)")
    print("4. Executar otimização completa")
    print("5. Analisar resultados existentes")
    print("6. Comparar restrições nutricionais")
    print("7. Executar estudo completo (opções 1-5)")
    print("8. Limpar arquivos gerados")
    print("0. Sair")
    print("="*60)

def limpar_arquivos():
    """Remove arquivos gerados pelo programa"""
    extensoes = ['.mod', '.dat', '.json', '.txt', '__pycache__'] # Adicionado __pycache__
    arquivos_removidos = 0
    
    current_dir = os.getcwd()
    
    for root, dirs, files in os.walk(current_dir):
        # Handle __pycache__ directories
        if '__pycache__' in dirs:
            pycache_path = os.path.join(root, '__pycache__')
            try:
                import shutil
                shutil.rmtree(pycache_path)
                print(f"Removido diretório: {pycache_path}")
                arquivos_removidos += 1
            except OSError as e:
                print(f"Erro ao remover diretório {pycache_path}: {e}")

        # Handle individual files
        for arquivo in files:
            if any(arquivo.endswith(ext) for ext in extensoes):
                # Only remove files generated by this script, avoiding system files
                if arquivo.startswith(('dieta', 'resultados', 'relatorio')):
                    file_path = os.path.join(root, arquivo)
                    try:
                        os.remove(file_path)
                        print(f"Removido: {file_path}")
                        arquivos_removidos += 1
                    except OSError as e:
                        print(f"Erro ao remover {file_path}: {e}")
    
    if arquivos_removidos == 0:
        print("Nenhum arquivo para remover.")
    else:
        print(f"\nTotal de arquivos removidos: {arquivos_removidos}")

def executar_otimizacao_completa():
    """Executa todo o processo de otimização"""
    print("\n" + "="*60)
    print("EXECUTANDO OTIMIZAÇÃO COMPLETA")
    print("="*60)
    
    # 1. Criar modelos
    print("\n1. Criando modelos AMPL...")
    criar_modelos()
    
    # 2. Criar dados
    print("\n2. Criando arquivos de dados...")
    criar_todos_arquivos_dat()
    
    # 3. Resolver modelos
    print("\n3. Resolvendo modelos...")
    solver = DietSolver()
    
    if not solver.ampl:
        print("Erro: AMPL não está disponível. Verifique a instalação.")
        return False
    
    resultados = {}
    
    # Modelo básico
    print("\n3.1. Resolvendo modelo básico...")
    try:
        resultados['basico'] = solver.resolver_modelo("dieta_basico.mod", "dieta_relaxado.dat")
        if resultados['basico'] and resultados['basico']['solve_result'] == 'optimal':
            solver.salvar_resultados(resultados['basico'], "resultados_basico")
            print("✓ Modelo básico resolvido com sucesso!")
        else:
            print("✗ Falha ou solução não-ótima ao resolver modelo básico")
            if resultados['basico']:
                print(f"   Status da solução: {resultados['basico']['solve_result']}")
    except Exception as e:
        print(f"✗ Erro no modelo básico: {e}")
    
    # Modelo diversificado
    print("\n3.2. Resolvendo modelo diversificado...")
    try:
        resultados['diversificado'] = solver.resolver_modelo("dieta_diversificado.mod", "dieta_relaxado.dat")
        if resultados['diversificado'] and resultados['diversificado']['solve_result'] == 'optimal':
            solver.salvar_resultados(resultados['diversificado'], "resultados_diversificado")
            print("✓ Modelo diversificado resolvido com sucesso!")
        else:
            print("✗ Falha ou solução não-ótima ao resolver modelo diversificado")
            if resultados['diversificado']:
                print(f"   Status da solução: {resultados['diversificado']['solve_result']}")
    except Exception as e:
        print(f"✗ Erro no modelo diversificado: {e}")
    
    # Comparar soluções
    if resultados.get('basico') and resultados.get('diversificado') and \
       resultados['basico']['solve_result'] == 'optimal' and \
       resultados['diversificado']['solve_result'] == 'optimal':
        print("\n4. Comparando soluções...")
        solver.comparar_solucoes(
            resultados['basico'],
            resultados['diversificado'],
            "Solução Ótima",
            "Solução Diversificada"
        )
    else:
        print("\nNão foi possível comparar soluções, pois uma ou ambas não foram resolvidas otimamente.")
        
    return bool(resultados)

def analisar_resultados():
    """Analisa resultados existentes"""
    print("\n" + "="*60)
    print("ANALISANDO RESULTADOS")
    print("="*60)
    
    analyzer = DietAnalyzer()
    
    # Verificar quais arquivos de resultado existem
    arquivos_resultado = []
    if os.path.exists("resultados_basico.json"):
        arquivos_resultado.append(("resultados_basico.json", "Solução Ótima"))
    if os.path.exists("resultados_diversificado.json"):
        arquivos_resultado.append(("resultados_diversificado.json", "Solução Diversificada"))
    
    if not arquivos_resultado:
        print("Nenhum arquivo de resultado encontrado!")
        print("Execute primeiro a otimização (opção 4) para gerar resultados.")
        return
    
    resultados_carregados = []
    nomes_solucoes = []
    
    for arquivo, nome in arquivos_resultado:
        print(f"\nAnalisando {nome}...")
        resultado = analyzer.carregar_resultados(arquivo)
        if resultado:
            resultados_carregados.append(resultado)
            nomes_solucoes.append(nome)
            
            # Criar visualizações
            try:
                analyzer.criar_grafico_barras_alimentos(resultado, f"{nome} - Alimentos Selecionados")
                analyzer.criar_grafico_pizza_custos(resultado, f"{nome} - Distribuição de Custos")
                analyzer.criar_grafico_nutrientes(resultado, f"{nome} - Análise Nutricional")
                analyzer.criar_relatorio_completo(resultado, f"relatorio_{nome.lower().replace(' ', '_')}")
                print(f"✓ Análise de {nome} concluída!")
            except Exception as e:
                print(f"✗ Erro na análise de {nome}: {e}")
                print("   Verifique se os dados nos resultados são válidos para geração de gráficos.")
    
    if len(resultados_carregados) == 2:
        print("\nComparando múltiplas soluções...")
        analyzer.comparar_multiplas_solucoes(
            resultados_carregados,
            nomes_solucoes
        )
    elif len(resultados_carregados) == 1:
        print("\nApenas uma solução foi carregada. Não é possível fazer uma comparação de múltiplas soluções.")
    else:
        print("\nNenhuma solução carregada para comparação.")

def main():
    """Função principal para executar o programa"""
    while True:
        exibir_menu()
        escolha = input("Escolha uma opção: ")

        if escolha == '1':
            exibir_tabela_alimentos(ALIMENTOS_DATA)
        elif escolha == '2':
            criar_modelos()
        elif escolha == '3':
            criar_todos_arquivos_dat()
        elif escolha == '4':
            executar_otimizacao_completa()
        elif escolha == '5':
            analisar_resultados()
        elif escolha == '6':
            comparar_restricoes()
        elif escolha == '7':
            print("\n" + "="*60)
            print("EXECUTANDO ESTUDO COMPLETO (todas as etapas)")
            print("="*60)
            exibir_tabela_alimentos(ALIMENTOS_DATA)
            comparar_restricoes()
            executar_otimizacao_completa()
            analisar_resultados()
            print("\n" + "="*60)
            print("ESTUDO COMPLETO FINALIZADO!")
            print("="*60)
        elif escolha == '8':
            limpar_arquivos()
        elif escolha == '0':
            print("Saindo do programa. Até mais!")
            sys.exit()
        else:
            print("Opção inválida. Por favor, tente novamente.")

if __name__ == "__main__":
    main()
